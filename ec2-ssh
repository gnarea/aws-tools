#!/bin/bash
. "$(dirname $BASH_SOURCE)/_bootstrap.sh"


# ===== Constants and functions


KNOWN_HOSTS_FILE_PATH="$HOME/.ssh/ec2_known_hosts"

IP_ADDRESS_JMES_PATH='Reservations[].Instances[].[PublicIpAddress]'


function resolve_ssh_target {
    local target_original="$1"

    local remote_user=""
    local target_host_original

    if [[ "${target_original}" == *"@"* ]]; then
        remote_user="${target_original%@*}"
        target_host_original="${target_original#*@}"
    else
        target_host_original="${target_original}"
    fi

    local ip_address="$(fetch_ip_address_for_target "${target_host_original}")"

    if [[ "${remote_user}" ]]; then
        echo "${remote_user}@${ip_address}"
    else
        echo "${ip_address}"
    fi
}


function get_ip_address_for_instance_id {
    local instance_id="$1"

    aws ec2 describe-instances \
        --instance-ids "${instance_id}" \
        --query "${IP_ADDRESS_JMES_PATH}" \
        --output text
}


function get_random_instance_address_for_asg {
    local asg_name="$1"

    local ip_address_jmespath="
        Reservations[].
            Instances[?
                State.Name!='terminated' &&
                Tags[?Key=='aws:autoscaling:groupName' && Value=='${asg_name}']
                ].
            [PublicIpAddress]
    "
    local instances_ip_addresses="$(
        aws ec2 describe-instances \
            --query "${ip_address_jmespath}" \
            --output text
    )"
    if [[ "${instances_ip_addresses}" ]]; then
        echo "${instances_ip_addresses}" | head --lines=1
    else
        error_out 2 "Could not find any running instance in ASG ${asg_name}"
    fi
}


function fetch_ip_address_for_target {
    local target="$1"

    if [[ "${target}" =~ ^i- ]]; then
        get_ip_address_for_instance_id "${target}"
    elif is_ip_address "${target}"; then
        echo "${target}"
    else
        get_random_instance_address_for_asg "${target}"
    fi
}


function is_ip_address {
    local ip_address="$1"

    [[ "${ip_address}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] \
        || \
        [[ "${ip_address}" =~ ^[0-9a-f:]*:[0-9a-f:]*$ ]]
}


# ===== Main


if [[ $# < 1 ]]; then
    error_out \
        1 \
        "Usage: ${0##*/} [USER@]ASG_NAME|INSTANCE_ID|IP_ADDR [REMOTE_COMMAND...]"
fi
TARGET_ORIGINAL="$1"
shift


TARGET_RESOLVED="$(resolve_ssh_target "${TARGET_ORIGINAL}")"
exec ssh \
    -o "UserKnownHostsFile ${KNOWN_HOSTS_FILE_PATH}" \
    "${TARGET_RESOLVED}" \
    "$@"
